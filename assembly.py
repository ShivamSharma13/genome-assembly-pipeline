#!/usr/bin/env python

#This script takes gunzipped FASTQ files generated by illumina sequencing as input. 
#Sequences are then subject to quality control, de novo assembly via 3 separate tools, then the best assembly is selected via post-assembly QC. 
#This final assembly is then run through BLAST to determine species identification

import subprocess
import argparse
import os
import re
parser = argparse.ArgumentParser()
parser.add_argument("-i", "--input", help="this is input file directory where files are .fq")
parser.add_argument("-o", "--outputfile", help="this is the name of the output file")
inputarguments = parser.parse_args()
if inputarguments.input:
	file_directory = inputarguments.input
else:
	print("error, file directory needed")
	
if inputarguments.outputfile:
	output_file = inputarguments.outputfile
else:
	print("error, output file needed")


def quality_control(file_directory):
	i = 1
	for filename in os.listdir(file_directory):
		myfile = file_directory + '/' + filename
		print("files beingp processed:" + filename)
		subprocess.call(["./FastQC/fastqc", myfile, "-j", "./jdk8u232-b09/bin/java"])

quality_control(file_directory)	