#!/usr/bin/env python

#This script takes gunzipped FASTQ files generated by illumina sequencing as input. 
#Sequences are then subject to quality control, de novo assembly via 3 separate tools, then the best assembly is selected via post-assembly QC. 
#This final assembly is then run through BLAST to determine species identification

import subprocess
import argparse
import os
import re
parser = argparse.ArgumentParser()
parser.add_argument("-i", "--input", help="this is input file directory where files are .fq")
parser.add_argument("-o", "--outputfile", help="this is the name of the output file")
inputarguments = parser.parse_args()
if inputarguments.input:
	file_directory = inputarguments.input
else:
	print("error, file directory needed")
	
if inputarguments.outputfile:
	output_file = inputarguments.outputfile
else:
	print("error, output file needed")



def quality_control(file_directory):	#Function utlizing fastqc and trimmomatic 
	i = 1
	file_list = []
	for filename in os.listdir(file_directory):
		myfile = file_directory + '/' + filename	#calls unzipped .fq files
		if "h" not in filename:
			listname = "./fastqc_output/" + filename[:-3] + "_fastqc.zip"
			file_list.append(listname)
		print("files beingp processed:" + filename)
		#subprocess.call(["./FastQC/fastqc", myfile, "-j", "./jdk8u232-b09/bin/java", "-o", "./fastqc_output", "-t", "6"])	#performs fastqc
	
	for file in file_list:
		if "_fastqc.zip" in file:
			#subprocess.call(["unzip", file])	#unzips all generated files
			with open("all_fastq_files.txt",'a') as myfi:
				myfi.write("./" + file[16:-4] + "/fastqc_data.txt" + '\n') 	#creates a file with the names of all the new unzipped folders and path to fastqc_data.txt for them
			i += 1
#def trimmomatic(fastqc_output):
#	with open("./all_fastq_files.txt", 'r') as myfi:
#		for line in myfi:
#			subprocess.call(["cd ~", "java", "-jar", "../projects/group-b/genome-assembly/Trimmomatic-0.39/trimmomatic-0.39.jar", "PE"

quality_control(file_directory)	